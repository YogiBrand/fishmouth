version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.4-alpine
    container_name: fishmouth_postgres
    environment:
      POSTGRES_DB: fishmouth
      POSTGRES_USER: fishmouth
      POSTGRES_PASSWORD: fishmouth123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fishmouth"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: fishmouth_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fishmouth_backend
    environment:
      DATABASE_URL: postgresql://fishmouth:fishmouth123@postgres:5432/fishmouth
      REDIS_URL: redis://redis:6379
      LOG_JSON: "true"
      SERVICE_VERSION: ${SERVICE_VERSION:-dev}
      ADDRESS_LOOKUP_SERVICE_URL: ${ADDRESS_LOOKUP_SERVICE_URL:-http://address_lookup_8022:8022}
      BILLING_SERVICE_URL: ${BILLING_SERVICE_URL:-http://billing_gw_8032:8032}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-}
      SENTRY_RELEASE: ${SENTRY_RELEASE:-local}
      JWT_SECRET: your-secret-key-change-in-production
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY:-}
      DEEPGRAM_API_KEY: ${DEEPGRAM_API_KEY:-}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-}
      ASSISTANT_ENABLED: "true"
      ASSISTANT_MAX_TOKENS: ${ASSISTANT_MAX_TOKENS:-256}
      VLLM_BASE_URL: ${VLLM_BASE_URL:-http://vllm:8006/v1}
      ASSISTANT_MODEL: ${ASSISTANT_MODEL:-Qwen2.5-7B-Instruct}
      PYTHONPATH: /app:/shared
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./shared:/shared
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/readyz')\""
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fishmouth_celery_worker
    environment:
      DATABASE_URL: postgresql://fishmouth:fishmouth123@postgres:5432/fishmouth
      REDIS_URL: redis://redis:6379
      ADDRESS_LOOKUP_SERVICE_URL: ${ADDRESS_LOOKUP_SERVICE_URL:-http://address_lookup_8022:8022}
      BILLING_SERVICE_URL: ${BILLING_SERVICE_URL:-http://billing_gw_8032:8032}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY:-}
      DEEPGRAM_API_KEY: ${DEEPGRAM_API_KEY:-}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-}
      PYTHONPATH: /app:/shared
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./shared:/shared
    command: celery -A celery_app worker --loglevel=info

  voice_server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fishmouth_voice_server
    environment:
      DATABASE_URL: postgresql://fishmouth:fishmouth123@postgres:5432/fishmouth
      REDIS_URL: redis://redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY:-}
      DEEPGRAM_API_KEY: ${DEEPGRAM_API_KEY:-}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      LOG_JSON: "true"
      SERVICE_VERSION: ${SERVICE_VERSION:-dev}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-}
      PYTHONPATH: /app:/shared
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./shared:/shared
    command: uvicorn voice_server:app --host 0.0.0.0 --port 8001 --reload
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8001/readyz')\""
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Data Acquisition Services
  scraper-service:
    build:
      context: ./services/scraper-service
      dockerfile: Dockerfile
    container_name: fishmouth_scraper_service
    environment:
      DATABASE_URL: postgresql://fishmouth:fishmouth123@postgres:5432/fishmouth
      REDIS_URL: redis://redis:6379
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-}
      MAPBOX_API_KEY: ${MAPBOX_API_KEY:-}
      LOG_JSON: "true"
      SERVICE_VERSION: ${SERVICE_VERSION:-dev}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-}
    ports:
      - "8011:8011"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/scraper-service:/app
      - ./shared:/app/shared
    restart: unless-stopped
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8011/readyz')\""
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  enrichment-service:
    build:
      context: ./services/enrichment-service
      dockerfile: Dockerfile
    container_name: fishmouth_enrichment_service
    environment:
      DATABASE_URL: postgresql://fishmouth:fishmouth123@postgres:5432/fishmouth
      REDIS_URL: redis://redis:6379
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-}
      MAPBOX_API_KEY: ${MAPBOX_API_KEY:-}
      HUNTER_IO_API_KEY: ${HUNTER_IO_API_KEY:-}
      CLEARBIT_API_KEY: ${CLEARBIT_API_KEY:-}
      LOG_JSON: "true"
      SERVICE_VERSION: ${SERVICE_VERSION:-dev}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-}
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/enrichment-service:/app
      - ./shared:/app/shared
    restart: unless-stopped
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8004/readyz')\""
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  lead-generator:
    build:
      context: ./services/lead-generator
      dockerfile: Dockerfile
    container_name: fishmouth_lead_generator
    environment:
      DATABASE_URL: postgresql://fishmouth:fishmouth123@postgres:5432/fishmouth
      REDIS_URL: redis://redis:6379
    ports:
      - "8008:8008"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/lead-generator:/app
      - ./shared:/app/shared
    restart: unless-stopped
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8008/readyz')\""
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile
    container_name: fishmouth_orchestrator
    environment:
      DATABASE_URL: postgresql://fishmouth:fishmouth123@postgres:5432/fishmouth
      REDIS_URL: redis://redis:6379
    ports:
      - "8009:8009"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      enrichment-service:
        condition: service_started
      lead-generator:
        condition: service_started
      image-processor:
        condition: service_started
    volumes:
      - ./services/orchestrator:/app
      - ./shared:/app/shared
    restart: unless-stopped
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8009/readyz')\""
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  # Image Processing Service
  image-processor:
    build:
      context: ./services/image-processor
      dockerfile: Dockerfile
    container_name: fishmouth_image_processor
    environment:
      DATABASE_URL: postgresql://fishmouth:fishmouth123@postgres:5432/fishmouth
      REDIS_URL: redis://redis:6379
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-}
      MAPBOX_API_KEY: ${MAPBOX_API_KEY:-}
    ports:
      - "8012:8012"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/image-processor:/app
      - ./shared:/app/shared
      - ./data/images:/app/images
    restart: unless-stopped
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8012/readyz')\""
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  # ML Inference Service
  ml-inference:
    build:
      context: ./services/ml-inference
      dockerfile: Dockerfile
    container_name: fishmouth_ml_inference
    environment:
      DATABASE_URL: postgresql://fishmouth:fishmouth123@postgres:5432/fishmouth
      REDIS_URL: redis://redis:6379
    ports:
      - "8013:8013"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      image-processor:
        condition: service_started
    volumes:
      - ./services/ml-inference:/app
      - ./shared:/app/shared
      - ./data/images:/app/images
      - ./models:/app/models
    restart: unless-stopped
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8013/readyz')\""
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  # vLLM OpenAI-compatible GPU server
  vllm:
    image: vllm/vllm-openai:latest
    container_name: fishmouth_vllm
    command: >
      python -m vllm.entrypoints.openai.api_server \
      --model Qwen/Qwen2.5-7B-Instruct \
      --dtype float16 \
      --tensor-parallel-size 2 \
      --max-model-len 4096 \
      --gpu-memory-utilization 0.90 \
      --port 8006
    environment:
      - HF_TOKEN=${HF_TOKEN}
    # Optional: mount local models if pre-downloaded
    # volumes:
    #   - /opt/fishmouth-models:/models:ro
    gpus: all
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    networks:
      - default

  # Community Street Imagery Service (FREE-FIRST)
  street-imagery:
    build:
      context: ./services/street-imagery
      dockerfile: Dockerfile
    container_name: fishmouth_street_imagery
    environment:
      MAPILLARY_TOKEN: ${MAPILLARY_TOKEN:-}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
      OPENROUTER_BASE_URL: ${OPENROUTER_BASE_URL:-https://openrouter.ai/api/v1}
      OPENROUTER_VISION_MODEL: ${OPENROUTER_VISION_MODEL:-llava-v1.6-34b}
    ports:
      - "8014:8014"
    depends_on:
      - redis
    volumes:
      - ./services/street-imagery:/app
    restart: unless-stopped
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8014/readyz')\""
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Geocoder Service (FREE-FIRST)
  geocoder-service:
    build:
      context: ./services/geocoder-service
      dockerfile: Dockerfile
    container_name: fishmouth_geocoder
    environment:
      NOMINATIM_BASE: ${NOMINATIM_BASE:-https://nominatim.openstreetmap.org}
      MAPBOX_TOKEN: ${MAPBOX_TOKEN:-}
      GEOCODER_USER_AGENT: ${GEOCODER_USER_AGENT:-fishmouth-geocoder/1.0}
    ports:
      - "8015:8015"
    volumes:
      - ./services/geocoder-service:/app
    restart: unless-stopped
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8015/readyz')\""
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fishmouth_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_SCRAPER_URL=http://scraper-service:8011
      - REACT_APP_ENRICHMENT_URL=http://enrichment-service:8004
      - REACT_APP_LEAD_GENERATOR_URL=http://lead-generator:8008
      - REACT_APP_ORCHESTRATOR_URL=http://orchestrator:8009
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - backend
      - orchestrator
    stdin_open: true
    tty: true
    healthcheck:
      test:
        - "CMD-SHELL"
        - "wget -qO- http://localhost:3000 >/dev/null 2>&1"
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

volumes:
  postgres_data:
  scraper_data:
  enrichment_data:
