"""initial state

Revision ID: 6eef61f13528
Revises: 
Create Date: 2025-10-11 11:54:29.130109

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6eef61f13528'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_property_scans_id', table_name='property_scans')
    op.drop_table('property_scans')
    op.add_column('area_scans', sa.Column('started_at', sa.DateTime(), nullable=True))
    op.add_column('leads', sa.Column('area_scan_id', sa.Integer(), nullable=True))
    op.add_column('leads', sa.Column('city', sa.String(), nullable=True))
    op.add_column('leads', sa.Column('state', sa.String(), nullable=True))
    op.add_column('leads', sa.Column('zip_code', sa.String(), nullable=True))
    op.add_column('leads', sa.Column('latitude', sa.Float(), nullable=True))
    op.add_column('leads', sa.Column('longitude', sa.Float(), nullable=True))
    op.add_column('leads', sa.Column('roof_age_years', sa.Integer(), nullable=True))
    op.add_column('leads', sa.Column('roof_condition_score', sa.Float(), nullable=True))
    op.add_column('leads', sa.Column('roof_material', sa.String(), nullable=True))
    op.add_column('leads', sa.Column('roof_size_sqft', sa.Integer(), nullable=True))
    op.add_column('leads', sa.Column('aerial_image_url', sa.String(), nullable=True))
    op.add_column('leads', sa.Column('ai_analysis', sa.JSON(), nullable=True))
    op.add_column('leads', sa.Column('lead_score', sa.Float(), nullable=False))
    op.add_column('leads', sa.Column('priority', sa.Enum('HOT', 'WARM', 'COLD', name='leadpriority'), nullable=True))
    op.add_column('leads', sa.Column('replacement_urgency', sa.String(), nullable=True))
    op.add_column('leads', sa.Column('damage_indicators', sa.JSON(), nullable=True))
    op.add_column('leads', sa.Column('homeowner_name', sa.String(), nullable=True))
    op.add_column('leads', sa.Column('homeowner_email', sa.String(), nullable=True))
    op.add_column('leads', sa.Column('homeowner_phone', sa.String(), nullable=True))
    op.add_column('leads', sa.Column('contact_enriched', sa.Boolean(), nullable=True))
    op.add_column('leads', sa.Column('contact_enrichment_cost', sa.Float(), nullable=True))
    op.add_column('leads', sa.Column('property_value', sa.Integer(), nullable=True))
    op.add_column('leads', sa.Column('year_built', sa.Integer(), nullable=True))
    op.add_column('leads', sa.Column('property_type', sa.String(), nullable=True))
    op.add_column('leads', sa.Column('length_of_residence', sa.Integer(), nullable=True))
    op.add_column('leads', sa.Column('tags', sa.JSON(), nullable=True))
    op.add_column('leads', sa.Column('next_follow_up', sa.DateTime(), nullable=True))
    op.add_column('leads', sa.Column('cost_to_generate', sa.Float(), nullable=True))
    op.add_column('leads', sa.Column('estimated_value', sa.Float(), nullable=True))
    op.add_column('leads', sa.Column('conversion_probability', sa.Float(), nullable=True))
    op.alter_column('leads', 'status',
               existing_type=sa.VARCHAR(),
               type_=sa.Enum('NEW', 'CONTACTED', 'QUALIFIED', 'PROPOSAL_SENT', 'APPOINTMENT_SCHEDULED', 'CLOSED_WON', 'CLOSED_LOST', name='leadstatus'),
               existing_nullable=True)
    op.drop_constraint('leads_scan_id_fkey', 'leads', type_='foreignkey')
    op.create_foreign_key(None, 'leads', 'area_scans', ['area_scan_id'], ['id'])
    op.drop_column('leads', 'scan_id')
    op.drop_column('leads', 'score')
    op.drop_column('leads', 'email')
    op.drop_column('leads', 'ai_call_summary')
    op.drop_column('leads', 'name')
    op.drop_column('leads', 'phone')
    op.add_column('sequence_enrollments', sa.Column('last_execution_at', sa.DateTime(), nullable=True))
    op.add_column('sequence_enrollments', sa.Column('error_message', sa.Text(), nullable=True))
    op.add_column('sequence_enrollments', sa.Column('conversion_outcome', sa.String(), nullable=True))
    op.add_column('users', sa.Column('full_name', sa.String(), nullable=True))
    op.add_column('users', sa.Column('business_address', sa.String(), nullable=True))
    op.add_column('users', sa.Column('website', sa.String(), nullable=True))
    op.add_column('users', sa.Column('business_logo_url', sa.String(), nullable=True))
    op.add_column('users', sa.Column('service_area', sa.JSON(), nullable=True))
    op.add_column('users', sa.Column('subscription_tier', sa.String(), nullable=True))
    op.add_column('users', sa.Column('subscription_status', sa.String(), nullable=True))
    op.add_column('users', sa.Column('trial_leads_remaining', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('monthly_lead_count', sa.Integer(), nullable=True))
    op.add_column('voice_calls', sa.Column('sequence_enrollment_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'voice_calls', 'sequence_enrollments', ['sequence_enrollment_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'voice_calls', type_='foreignkey')
    op.drop_column('voice_calls', 'sequence_enrollment_id')
    op.drop_column('users', 'monthly_lead_count')
    op.drop_column('users', 'trial_leads_remaining')
    op.drop_column('users', 'subscription_status')
    op.drop_column('users', 'subscription_tier')
    op.drop_column('users', 'service_area')
    op.drop_column('users', 'business_logo_url')
    op.drop_column('users', 'website')
    op.drop_column('users', 'business_address')
    op.drop_column('users', 'full_name')
    op.drop_column('sequence_enrollments', 'conversion_outcome')
    op.drop_column('sequence_enrollments', 'error_message')
    op.drop_column('sequence_enrollments', 'last_execution_at')
    op.add_column('leads', sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('leads', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('leads', sa.Column('ai_call_summary', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('leads', sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('leads', sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('leads', sa.Column('scan_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'leads', type_='foreignkey')
    op.create_foreign_key('leads_scan_id_fkey', 'leads', 'property_scans', ['scan_id'], ['id'])
    op.alter_column('leads', 'status',
               existing_type=sa.Enum('NEW', 'CONTACTED', 'QUALIFIED', 'PROPOSAL_SENT', 'APPOINTMENT_SCHEDULED', 'CLOSED_WON', 'CLOSED_LOST', name='leadstatus'),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_column('leads', 'conversion_probability')
    op.drop_column('leads', 'estimated_value')
    op.drop_column('leads', 'cost_to_generate')
    op.drop_column('leads', 'next_follow_up')
    op.drop_column('leads', 'tags')
    op.drop_column('leads', 'length_of_residence')
    op.drop_column('leads', 'property_type')
    op.drop_column('leads', 'year_built')
    op.drop_column('leads', 'property_value')
    op.drop_column('leads', 'contact_enrichment_cost')
    op.drop_column('leads', 'contact_enriched')
    op.drop_column('leads', 'homeowner_phone')
    op.drop_column('leads', 'homeowner_email')
    op.drop_column('leads', 'homeowner_name')
    op.drop_column('leads', 'damage_indicators')
    op.drop_column('leads', 'replacement_urgency')
    op.drop_column('leads', 'priority')
    op.drop_column('leads', 'lead_score')
    op.drop_column('leads', 'ai_analysis')
    op.drop_column('leads', 'aerial_image_url')
    op.drop_column('leads', 'roof_size_sqft')
    op.drop_column('leads', 'roof_material')
    op.drop_column('leads', 'roof_condition_score')
    op.drop_column('leads', 'roof_age_years')
    op.drop_column('leads', 'longitude')
    op.drop_column('leads', 'latitude')
    op.drop_column('leads', 'zip_code')
    op.drop_column('leads', 'state')
    op.drop_column('leads', 'city')
    op.drop_column('leads', 'area_scan_id')
    op.drop_column('area_scans', 'started_at')
    op.create_table('property_scans',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('roof_age', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('roof_condition', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('property_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('estimated_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ai_analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='property_scans_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='property_scans_pkey')
    )
    op.create_index('ix_property_scans_id', 'property_scans', ['id'], unique=False)
    # ### end Alembic commands ###
