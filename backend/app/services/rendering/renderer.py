"""Utilities for rendering enhanced reports to static assets."""

from __future__ import annotations

import hashlib
from base64 import b64decode
from datetime import datetime
from pathlib import Path
from typing import Dict, Tuple


STATIC_ROOT = Path(__file__).resolve().parents[2] / "static"
UPLOADS_ROOT = STATIC_ROOT / "uploads" / "reports"
UPLOADS_ROOT.mkdir(parents=True, exist_ok=True)

_PLACEHOLDER_PNG = b64decode(
    b"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PFSOPwAAAABJRU5ErkJggg=="
)


def _ensure_output_dir(report_id: str) -> Path:
    target = UPLOADS_ROOT / report_id
    target.mkdir(parents=True, exist_ok=True)
    return target


def content_checksum(content: str) -> str:
    """Return a deterministic checksum for the rendered HTML."""

    return hashlib.sha256(content.encode("utf-8")).hexdigest()


def render_pdf_and_preview(html: str, report_id: str, base_name: str) -> Dict[str, str]:
    """Persist HTML, PDF, and PNG preview assets for a report."""

    output_dir = _ensure_output_dir(report_id)

    html_filename = f"{base_name}.html"
    pdf_filename = f"{base_name}.pdf"
    png_filename = f"{base_name}.png"

    html_path = output_dir / html_filename
    pdf_path = output_dir / pdf_filename
    png_path = output_dir / png_filename

    html_path.write_text(html, encoding="utf-8")

    try:
        from reportlab.lib.pagesizes import letter  # type: ignore
        from reportlab.pdfgen import canvas  # type: ignore

        canvas_obj = canvas.Canvas(str(pdf_path), pagesize=letter)
        canvas_obj.setTitle("Fish Mouth Report")
        canvas_obj.drawString(72, 720, "Fish Mouth Report")
        canvas_obj.drawString(72, 700, datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC"))
        canvas_obj.drawString(72, 680, "Generated by Fish Mouth renderer.")
        canvas_obj.showPage()
        canvas_obj.save()
    except Exception:  # noqa: BLE001
        pdf_path.write_text(
            "Fish Mouth placeholder PDF. Install reportlab for rich output.\n",
            encoding="utf-8",
        )

    png_path.write_bytes(_PLACEHOLDER_PNG)

    base_url = f"/static/uploads/reports/{report_id}"
    return {
        "html_url": f"{base_url}/{html_filename}",
        "pdf_url": f"{base_url}/{pdf_filename}",
        "preview_url": f"{base_url}/{png_filename}",
        "html_path": str(html_path),
        "pdf_path": str(pdf_path),
        "preview_path": str(png_path),
    }


def render_report_html_to_pdf_and_png(report_id: str, html: str) -> Tuple[str, str, str]:
    """Compatibility wrapper that returns file paths and checksum.

    Returns a tuple of (pdf_path, png_path, checksum).
    """

    checksum = content_checksum(html)
    assets = render_pdf_and_preview(html, report_id, checksum[:16])
    return assets["pdf_path"], assets["preview_path"], checksum
